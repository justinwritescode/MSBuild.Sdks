using System.Text;
using System.Xml;
namespace MSBuild.UsingsSdk;

using System.Xml.Linq;

public class CreateUsingsProject : MSBTask
{
    [Required]
    public string InputFile { get; set; } = string.Empty;
    [Required]
    public string OutputFile { get; set; } = string.Empty;

    public override bool Execute()
    {
        var project = XDocument.Load(InputFile);

        Console.WriteLine("Input file: " + InputFile);
        var usings = project.Descendants("Using").OrderBy(x => x.Attribute("Include").Value).ToArray();
        var projectReferences = project.Descendants("ProjectReference").OrderBy(x => x.Attribute("Include").Value).ToArray();
        var packageReferences = project.Descendants("PackageReference").OrderBy(x => x.Attribute("Include").Value).ToArray();
        var properties = project.Descendants("PropertyGroup").Descendants().ToArray();

        Console.WriteLine("Usings: " + usings.Length);
        Console.WriteLine("ProjectReferences: " + projectReferences.Length);
        Console.WriteLine("packageReferences: " + packageReferences.Length);
        Console.WriteLine("properties: " + properties.Length);
        var usingsFile = new XDocument(
            new XElement("Project",
                new XComment("<auto-generated />"),
                new XComment("This code was generated by a tool.  Do not modify it."),
                new XComment("⬇️ Properties ⬇️"),
                new XElement("PropertyGroup",
                    properties),
                new XElement("ItemGroup",
                    new XAttribute("Label", "Usings"),
                    new XComment("⬇️ Usings ⬇️"),
                    usings),
                new XElement("ItemGroup",
                    new XAttribute("Label", "Package References"),
                    new XComment("⬇️ Package References ⬇️"),
                    packageReferences),
                new XElement("ItemGroup",
                    new XAttribute("Label", "Project References"),
                    new XComment("⬇️ Project References ⬇️"),
                    projectReferences)));
        Console.WriteLine("Properties: " + usingsFile.Descendants("PropertyGroup").Count());
        Console.WriteLine("packageReferences: " + usingsFile.Descendants("PackageReference").Count());

        using (var outFile = File.CreateText(OutputFile))
        {
            usingsFile.Save(outFile);
        }
        // File.CreateText(OutputFile).Write(usingsFile.ToString());
        Console.WriteLine(usingsFile.ToString());
        Console.WriteLine("Wrote file: " + OutputFile);

        // var projectFile = new XDocument();
        // projectFile.Add(new XElement("Project",
        //     new XComment("<auto-generated />"),
        //     new XComment("This code was generated by a tool.  Do not modify it."),
        //     new XElement("PropertyGroup",
        //         new XElement("TargetFramework", "netstandard1.0", new XAttribute("Condition", "'$(TargetFramework)' == ''")),
        //         new XElement("LangVersion", "latest", new XAttribute("Condition", "'$(LangVersion)' == ''"),
        //         new XElement("EnableCentralPackageVersions", "false"),
        //         new XElement("GeneratePackageOnBuild", "true"),
        //         new XElement("IsNuGetized", "true"))),
        //     new XElement("ItemGroup",
        //         new XAttribute("Label", "Usings File"),
        //         new XElement("PackageFile", new XAttribute("Include", OutputFile), new XAttribute("PackagePath", "build/" + Path.GetFileName(OutputFile))),
        //     new XElement("ItemGroup",
        //         new XAttribute("Label", "Package References"),
        //         new XElement("PackageReference", new XAttribute("Include", "NuGetizer"), new XAttribute("Version", "0.9.0"))))));
        // projectFile.WriteTo(new System.Xml.XmlTextWriter(File.CreateText(Path.ChangeExtension(OutputFile, ".nuproj"))));

        return true;
    }
}
